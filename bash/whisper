#!/bin/sh
#//*========================================================================
#// whisper
#//
#// whisper {start|stop|lock|reset|status}
#//
#// WSPR/FT8/CW beacon for the Raspberry Pi.
#// See accompanying README file for a description on how to use this code.
#// License:
#//   This program is free software: you can redistribute it and/or modify
#//   it under the terms of the GNU General Public License as published by
#//   the Free Software Foundation, either version 2 of the License, or
#//   (at your option) any later version.
#//
#//   This program is distributed in the hope that it will be useful,
#//   but WITHOUT ANY WARRANTY; without even the implied warranty of
#//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#//   GNU General Public License for more details.
#//
#//   You should have received a copy of the GNU General Public License
#//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#//*========================================================================
#// lu7did: initial load
#*----------------------------------------------------------------------------
#* Initialization
#* DO NOT RUN EITHER AS A rc.local script nor as a systemd controlled service
#*----------------------------------------------------------------------------

PATH=/sbin:/bin:/usr/sbin:/usr/bin
. /lib/lsb/init-functions

DPATH="/home/pi/whisper/"
LOG="whisper.log"
LOCK="whisper.lck"
VERSION="1.3"
ON="1"
OFF="0"
RX=0
TX=1
MAXTEMP="60"
COOLTIME="120"
PROCLIST='wspr pift8 PiCW PSK31 rtlsdr_wsprd' 

#*----------------------------------------------------------------------------
#* Beacon specific data configuration 
#*----------------------------------------------------------------------------
TXOPTS="-x 1 -o -s "
BAND="20m " 
CALLSIGN="LU7DID"
GRID="GF05"
GRIX="TE"
POWER="20 "
HEIGHT=40
GPIO="27"
CHANNEL=0
SYNC="55"
NMAX=1
EVERY=5
b=0
#*-------------------------------------------------------------------------
#* getCPU
#* Get CPU load 
#*--------------- Requires apt-get install sysstat
#*-------------------------------------------------------------------------
getCPU () {

sar 1 3 | grep "Media:" | while read a ; do
 echo $a | awk '{print $3 + $4 + $5 + $6 + $7}';
done
}
#*-----------------------------------------------------------------------------
#* manageTemp()
#* Get core temperature and stop the beacon to cool down if exceeded
#*-----------------------------------------------------------------------------
manageTemp () {

#echo "Whisper: "`date`" Managing temperature procedure" 
#A=$(vcgencmd measure_temp)
#B=$(echo $A  | cut -f2 -d"=" | cut -d"'" -f1 | tr -d '\r')
#C=$(echo $B | cut -f1 -d".")
#D=$(($C * 1))
#echo $D

echo "45"
}
#*--------------------------------------------------------------------------
#* PTTOn ** Turn the antenna relay to Transmit **
#*--------------------------------------------------------------------------
PTTOn () {

echo "Whisper: "`date`" PTT Port(27) State(1)"
gpio mode "27"  out
gpio -g write "27" 1  2> /dev/null

sudo /home/pi/whisper/turnon.py

}
#*--------------------------------------------------------------------------
#* PTTOff ** Turn the antenna relay to Receive **
#*--------------------------------------------------------------------------
PTTOff () {

echo "Whisper: "`date`" PTT Port(27) State(0)"
gpio mode "27" out
gpio -g write "27" 0  2> /dev/null

sudo /home/pi/whisper/turnoff.py

}
#*--------------------------------------------------------------------------
#* putTelemetry 
#* Gather telemetry and assemble an information frame with it, log at Syslog
#*--------------------------------------------------------------------------

putTelemetry () {

STATE="T($(getTemp)Â°C) V($(getVolt)V) Clk($(getClock)MHz) St($(getStatus)) CPU($(getCPU)%) DASD($(getDASD)%)" 
echo $STATE | logger -i -t "TLM"
echo "Whisper: "`date`" Telemetry: "$STATE 

}

#*--------------------------------------------------------------------------
#* getTelemetry
#* Obtain telemetry in WSPR format
#*--------------------------------------------------------------------------
getTelemetry () {

VOLT=$(getVolt)
TEMP=$(getTemp)

echo $(python wsprtlm.py -g "$1$2" -e "$3" -c "$4" -b "$VOLT" -t "$TEMP" -l -q -p) 
}
#*--------------------------------------------------------------------------
#* evaluateTemp
#* Temperature management (inactive)
#*--------------------------------------------------------------------------
evaluateTemp () {

X=1
#T=$(manageTemp)
#X=$1
#if [ $T -ge $X ] ; then
#   echo "Whisper: "`date`" Temp ("$T") exceeds max ($MAX), stopping TX to cool down during $COOLTIME secs" && sleep $2
#   echo "Whisper: "`date`" Temperature is now "$(vcgencmd measure_temp)" TX resumed" 
#fi

}
#*--------------------------------------------------------------------------
#* txRTTY   ** Transmit RTTY **
#*--------------------------------------------------------------------------
txRTTY () {
fRTTY="14097000"

echo "Whisper: "`date`" Starting RTTY transmission cycle"
sudo /home/pi/pirtty/pirtty  14097000 "   RYRYRYRYRY CQ $1 $1 $2 $3DBM $4 K  " 170 45.5

}

#*--------------------------------------------------------------------------
#* txWSPR   ** Transmit WSPR **
#*--------------------------------------------------------------------------
txWSPR () {

echo "Whisper: "`date`" Starting WSPR transmission cycle"
sudo /home/pi/WsprryPi/wspr $1 $2 $3 $4 $5   

}
#*--------------------------------------------------------------------------
#* txFT8   ** Transmit FT8 **
#*--------------------------------------------------------------------------
txFT8 () {

SLOT="0"
OFFSET="1240"
FFT8="14074000"

echo "Whisper: "`date`" Starting FT8 transmission cycle [$3/2]" 
sudo /home/pi/rpitx/pift8 -f "$FFT8" -m "CQ $1 $2" -o "$OFFSET" -s "$SLOT"

}
#*--------------------------------------------------------------------------
#* txCW  ** Transmit CW **
#*--------------------------------------------------------------------------
txCW() {

FCW="14097000"
sudo /home/pi/PiCW/PiCW --freq $FCW --wpm 20 "CQ DE $1 $2 $3 $4 K"

}
#*--------------------------------------------------------------------------
#* txPSK31 ** Transmit PSK31 (uses PSK31.sh script) **
#*--------------------------------------------------------------------------
txPSK31() {

sleep 2
FPSK="14097000"
sudo /home/pi/whisper/PSK31.sh $FPSK "CQ DE $1/B $2 $3 $4 K\r"

}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getCPU () {
sar 1 3 | grep "Media:" | while read a ; do
 echo $a | awk '{print $3 + $4 + $5 + $6 + $7}';
done
}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getTemp () {

TEMP=$(vcgencmd measure_temp)
echo $TEMP | cut -f2 -d"=" | cut -f1 -d"'"

}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getVolt () {

VOLT=$(vcgencmd measure_volts | cut -f2 -d"=" | cut -f1 -d"V" )
VOLT=$(python -c "print ('%.2f' % ($VOLT*1.0))" )
echo $VOLT 

}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getClock () {

CLOCK=$(vcgencmd measure_clock arm | cut -f2 -d"=")
FX=$(python -c "print float($CLOCK)/1000000")
echo $FX

}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getStatus () {

STATUS=$(vcgencmd get_throttled)
echo $STATUS | cut -f2 -d"="

}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getDASD () {
sudo df -k | grep "/dev/root" | awk '{ print $5 ; }' | cut -f1 -d"%"
}

#+-----------------------------------------------------------------------------
#* Kill all processes
#*-----------------------------------------------------------------------------
killProcess () {

#*--- Scan process list looking for wspr (transmission)
   for j in $PROCLIST
   do
      S=`ps -ef | pgrep $j`
      for i in $S; do
         echo "Whisper: "`date`" Killing $j PID("$i")" 
         sudo kill $i
      done
   done

#*--- Scan process list looking for whisper


   P=`sudo ps ax | awk '! /awk/ && /whisper/ { print $1}'`
   N=0

   for line in $P; do
       if [ $line -ne $$ ] 
       then
          echo "Whisper: "`date`" Killing  whisper PID("$line")"
          sudo kill $line
       fi
   done
}

#*--------------------------------------------------------------------------
#* Main Logic
#*--------------------------------------------------------------------------

#*---- Find number of instances running
cd $DPATH
PIDL=`sudo ps --no-headers -C whisper | awk '! /awk/ && /whisper/ { print $1}'`

N=0
for line in $PIDL; do
    if [ $line -ne $$ ] 
    then
       N=$(( $N + 1 ))
    fi
done
CPU=`getCPU`

#*---- React to argument (see whisper for command options)

case $1 in
#*=========================================================================================================================
#*---- Start the beacon. Control if instances are running and avoid reentrancy
#*=========================================================================================================================
	start)

#*---- If locked leave

               if [ -f $DPATH$LOCK ]; then
                  echo "Whisper: "`date`" Process lock found, terminating" 2>&1 | tee -a $DPATH$LOG
                  exit 0
               fi

#*---- If already running leave

               if [ $N \> $NMAX ]; then
                  exit 0
               fi

#*---- Mark the beginning of the execution

               echo "Whisper: "`date`" Starting  Ver "$VERSION" P("$N") PID("$$") CPU($CPU %)" 2>&1 | tee -a $DPATH$LOG
               PTTOff  2>&1 | tee -a $DPATH$LOG

#*---- Infinite loop $EVERY defines how many times comes to RX than TX


               count=0
               while [ true ];  do

#*---- Collect and register telemetry

                  n=$(( $count % $EVERY ))
                  echo "Whisper: "`date`" Cycle ($count of $EVERY) TX($n)" 2>&1 | tee -a $DPATH$LOG
                  #evaluateTemp "$MAXTEMP" "$COOLTIME" 2>&1 | tee -a $DPATH$LOG && sleep $COOLTIME
                  putTelemetry 2>&1 | tee -a $DPATH$LOG  

#*---- Once $EVERY loops the beacon gets activated
                  if [ $n -eq 0 ]; then

#*---- WSPR Beacon, the program control the proper window, would last 2 minutes plus the waiting time
  
                     PTTOn  2>&1 | tee -a $DPATH$LOG
                     txWSPR "$TXOPTS" "$CALLSIGN" "$GRID" "$POWER" "$BAND"  2>&1 | tee -a $DPATH$LOG
                     count=$(( $count + 1 )) 

#*---- FT8 Beacon, two frames are emited waiting one slot between each

                     echo "Whisper: "`date`" FT8 [1/2]" 2>&1 | tee -a $DPATH$LOG
                     txFT8 "$CALLSIGN" "$GRID" "1" 2>&1 | tee -a $DPATH$LOG
                     PTTOff  2>&1 | tee -a $DPATH$LOG
                     sleep 15

                     echo "Whisper: "`date`" FT8 [2/2]" 2>&1 | tee -a $DPATH$LOG
                     PTTOn  2>&1 | tee -a $DPATH$LOG
                     txFT8 "$CALLSIGN" "$GRID" "2" 2>&1 | tee -a $DPATH$LOG
                     PTTOff  2>&1 | tee -a $DPATH$LOG

#*---- Collect telemetry while waiting for the FT8 slot window to complete

                     TLM=$(getTelemetry "$GRID" "$GRIX" "$HEIGHT" "$CHANNEL" )
                     echo "Whisper: "`date`" Telemetry acquisition completed ($TLM) slot type b($b)" 2>&1 | tee -a $DPATH$LOG

                     sleep 15

#*---- Odd times the CW beacon follows, Even times the PSK31 Beacon is transmitted instead

                     case $b in
                     0) b=1 ;
                        echo "Whisper: "`date`" RTTY Beacon b[$b]" 2>&1 | tee -a $DPATH$LOG
                        sleep 2 2>&1 | tee -a $DPATH$LOG;
                        PTTOn 2>&1 | tee -a $DPATH$LOG;
                        txRTTY "$CALLSIGN" "$GRID" "$POWER" "$TLM" 2>&1 | tee -a $DPATH$LOG;
                        PTTOff  2>&1 | tee -a $DPATH$LOG;
                        sleep 25 ;
                        ;;
                     1) b=2 ;
                        echo "Whisper: "`date`" CW Beacon b[$b]" 2>&1 | tee -a $DPATH$LOG
                        sleep 2 2>&1 | tee -a $DPATH$LOG;
                        PTTOn 2>&1 | tee -a $DPATH$LOG;
                        txCW "$CALLSIGN" "$GRID" "$POWER" "$TLM" 2>&1 | tee -a $DPATH$LOG;
                        PTTOff  2>&1 | tee -a $DPATH$LOG;
                        sleep 25 ;
                        ;;
                     2) b=0;
                        echo "Whisper: "`date`" PSK31 Beacon b[$b]" 2>&1 | tee -a $DPATH$LOG
                        PTTOn 2>&1 | tee -a $DPATH$LOG; 
                        txPSK31 "$CALLSIGN" "$GRID" "$POWER" "$TLM" 2>&1 | tee -a $DPATH$LOG  ;
                        PTTOff  2>&1 | tee -a $DPATH$LOG;
                        sleep 20 ; 
                        ;;
                     esac

#*---- complete beacon slot

                     echo "Whisper: "`date`" Beacon cycle completed count($count)" 2>&1 | tee -a $DPATH$LOG

                 else

#*---- If this is a monitoring slot just wait
                     PTTOff  2>&1 | tee -a $DPATH$LOG
                     WAIT=$((( $SYNC * 2 ) - 3 ))
                     echo "Whisper: "`date`" Reception block waiting ($WAIT secs)" 2>&1 | tee -a $DPATH$LOG
                     sleep $WAIT
                 fi

#*---- Update monitoring slot

                 count=$(( $count + 1 ))
                 if [ $count -eq $EVERY ]; then
                    count=0
                 fi
                 echo "Whisper: "`date`" Beacon time slot [$count/$EVERY]" 2>&1 | tee -a $DPATH$LOG

               done
               echo "Whisper: "`date`" Beacon cycle abnormally terminated [$count/$EVERY]" 2>&1 | tee -a $DPATH$LOG


      	;;
#*=====================================================================================================================
#*---- Stop the beacon if an instance is found running
#*=====================================================================================================================
	stop)

               if [ $N \> $NMAX ]; then
                  killProcess 2> /dev/null | tee -a $DPATH$LOG
               else
                  echo "Whisper:"`date`" No daemon found, exit" 2> /dev/null | tee -a $DPATH$LOG
               fi
               exit 0
  	       ;;

#*=====================================================================================================================
#*---- Restart or  force-reload by stop and start (Miscellaneous operation functions)
#*=====================================================================================================================
	restart|force-reload)
                echo "Whisper: "`date`" Forcing reload" 2> /dev/null | tee -a $DPATH$LOG
                sudo $0 stop  2>&1 | tee -a $DPATH$LOG
                sudo $0 start 2>&1 | tee -a $DPATH$LOG
  		;;
#*---- Another alias to restart

	try-restart)
                echo "Whisper: "`date`" Trying to restart" 2>&1 | tee -a $DPATH$LOG
		if sudo $0 status >/dev/null; then
		   sudo $0 restart
		else
		   exit 0
		fi
		;;
#*---- Yet another alias to restart

	reload)
                echo "Whisper: "`date`" Script reload" 2>&1 | tee -a $DPATH$LOG
		sudo $0 restart
                exit 3
		;;
#*====================================================================================================
#*---- Stop the beacon and create a special lock file which will prevent further launches until reset
#*====================================================================================================
        lock)
                echo "Whisper: "`date`" Script locked" 2>&1 | tee -a $DPATH$LOG
                sudo touch $DPATH$LOCK 2>&1 | tee -a $DPATH$LOG
                sudo $0 stop
                exit 4
                ;;
#*====================================================================================================
#*---- Erase the lock file and launch
#*====================================================================================================
        reset)
                echo "Whisper: "`date`" Script reset" 2>&1 | tee -a $DPATH$LOG
                sudo rm -r $DPATH$LOCK 2>&1 | tee -a $DPATH$LOG
                exit 3
                ;;
#*====================================================================================================
#*---- Marks log with special label (i.e. a change in the beacon)
#*====================================================================================================
	checkpoint)
                echo "Whisper: "`date`" WSPR Log checkpoint("$2 $3 $4 $5")" 2>&1 | tee -a $DPATH$LOG
                exit 0
                ;;


#*====================================================================================================
#*---- beacon status
#*====================================================================================================
	status)
                echo "Whisper: "`date`" WSPR Process List Status" 2>&1 | tee -a $DPATH$LOG
                if [ $N \> $NMAX ]; then

#*---- instances of associated processes


                   echo "Whisper:" `date`" Process List" 2>&1 | tee -a $DPATH$LOG
                   for j in $PROCLIST
                   do
                     S=`ps -ef | pgrep $j`
                     for i in $S; do
                       echo "Whisper: "`date`"   --- $j PID("$i")" 2> /dev/null | tee -a $DPATH$LOG
                     done
                   done

#*---- instances of whisper script

                  P=`sudo ps ax | awk '! /awk/ && /whisper/ { print $1}'`
                  N=0
                  for line in $P; do
                     if [ $line -ne $$ ] 
                     then
                         echo "Whisper: "`date`"   --- whisper PID("$line")" 2> /dev/null | tee -a $DPATH$LOG
                     fi
                  done
                else
                  echo "Whisper: "`date`" No daemon found, exit" 2> /dev/null | tee -a $DPATH$LOG
		  exit 0
		fi

		;;
#*----- else, just a help message

	*)
		echo "Usage: $0 {start|stop|lock|reset|restart|try-restart|checkpoint|force-reload|status}"
		exit 2
		;;
esac
