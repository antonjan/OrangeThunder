#!/bin/sh
#//*========================================================================
#// whisper
#//
#// whisper {start|stop|lock|reset|status}
#//
#// WSPR/FT8/CW beacon for the Raspberry Pi.
#// See accompanying README file for a description on how to use this code.
#// License:
#//   This program is free software: you can redistribute it and/or modify
#//   it under the terms of the GNU General Public License as published by
#//   the Free Software Foundation, either version 2 of the License, or
#//   (at your option) any later version.
#//
#//   This program is distributed in the hope that it will be useful,
#//   but WITHOUT ANY WARRANTY; without even the implied warranty of
#//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#//   GNU General Public License for more details.
#//
#//   You should have received a copy of the GNU General Public License
#//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#//*========================================================================
#// lu7did: initial load
#*----------------------------------------------------------------------------
#* Initialization
#* DO NOT RUN EITHER AS A rc.local script nor as a systemd controlled service
#*----------------------------------------------------------------------------

PATH=/sbin:/bin:/usr/sbin:/usr/bin
. /lib/lsb/init-functions
DPATH="/home/pi/whisper/"
WSPRPATH="/home/pi/WsprryPi/"
WSPRDPATH="/home/pi/rtlsdr-wsprd/"
RPITXPATH="/home/pi/rpitx/"
CWPATH="/home/pi/PiCW/"
LOG="whisper.log"
ERR="whisper.err"
LOCK="whisper.lck"
VERSION="1.3"
TLM="whisper.tlm"
ON="1"
OFF="0"
RX=0
TX=1
MAXTEMP="60"
COOLTIME="120"
FT8ON=1
CWON=1
PROCLIST='wspr pift8 PiCW rtlsdr_wsprd' 

#*----------------------------------------------------------------------------
#* Beacon specific data configuration 
#*----------------------------------------------------------------------------
WSPR="wspr"
WSPRD="rtlsdr_wsprd"
FT8="pift8"
CW="PiCW"
TXOPTS="-x 1 -o -s "
BAND="20m " 
RXOPTS="-d 2 -n 4 -g 35 -S"
CALLSIGN="LU7DID"
GRID="GF05"
GRIX="TE"
POWER="20 "
HEIGHT=40
GPIO="27"
CHANNEL=0
SYNC="55"
NMAX=1
EVERY=5
RXPARMS="-f 14095600 -c $CALLSIGN -l $GRID $RXOPTS"
SLOT="0"
OFFSET="1240"
FFT8="14074000"
FCW="14099000"

#*-------------------------------------------------------------------------
#* getCPU
#* Get CPU load 
#*--------------- Requires apt-get install sysstat
#*-------------------------------------------------------------------------
getCPU() {

sar 1 3 | grep "Media:" | while read a ; do
 echo $a | awk '{print $3 + $4 + $5 + $6 + $7}';
done
}
#*-----------------------------------------------------------------------------
#* manageTemp()
#* Get core temperature and stop the beacon to cool down if exceeded
#*-----------------------------------------------------------------------------
manageTemp() {
echo "Whisper: "`date`" Managing temperature procedure" 2>&1 | tee -a $DPATH$LOG
A=$(vcgencmd measure_temp)
B=$(echo $A  | cut -f2 -d"=" | cut -d"'" -f1 | tr -d '\r')
C=$(echo $B | cut -f1 -d".")
D=$(($C * 1))
echo $D
}
#+-----------------------------------------------------------------------------
#* Get telemetry from all major sub-systems
#*-----------------------------------------------------------------------------
getCPU () {
sar 1 3 | grep "Media:" | while read a ; do
 echo $a | awk '{print $3 + $4 + $5 + $6 + $7}';
done
}

getTemp () {

TEMP=$(vcgencmd measure_temp)
echo $TEMP | cut -f2 -d"=" | cut -f1 -d"'"

}

getVolt () {

VOLT=$(vcgencmd measure_volts | cut -f2 -d"=" | cut -f1 -d"V" )
VOLT=$(python -c "print ('%.2f' % ($VOLT*1.0))" )
echo $VOLT 

}

getClock () {

CLOCK=$(vcgencmd measure_clock arm | cut -f2 -d"=")
FX=$(python -c "print float($CLOCK)/1000000")
echo $FX

}

getStatus () {

STATUS=$(vcgencmd get_throttled)
echo $STATUS | cut -f2 -d"="

}

getDASD () {
sudo df -k | grep "/dev/root" | awk '{ print $5 ; }' | cut -f1 -d"%"
}

#+-----------------------------------------------------------------------------
#* Kill all processes
#*-----------------------------------------------------------------------------
killProcess () {

#*--- Scan process list looking for wspr (transmission)
   for j in $PROCLIST
   do
      S=`ps -ef | pgrep $j`
      for i in $S; do
         echo "Whisper: "`date`" Killing $j PID("$i")" 
         sudo kill $i
      done
   done

#*--- Scan process list looking for whisper


   P=`sudo ps ax | awk '! /awk/ && /whisper/ { print $1}'`
   N=0

   for line in $P; do
       if [ $line -ne $$ ] 
       then
          echo "Whisper: "`date`" Killing  whisper PID("$line")"
          sudo kill $line
       fi
   done
}

#*--------------------------------------------------------------------------
#* Main Logic
#*--------------------------------------------------------------------------

#*---- Find number of instances running
cd $DPATH
PIDL=`sudo ps --no-headers -C whisper | awk '! /awk/ && /whisper/ { print $1}'`

N=0
for line in $PIDL; do
    if [ $line -ne $$ ] 
    then
       N=$(( $N + 1 ))
    fi
done


CPU=`getCPU`

echo "Whisper: "`date`" Starting  Ver "$VERSION" P("$N") PID("$$") CPU($CPU %)" 2>&1 | tee -a $DPATH$LOG

#*---- React to argument (see whisper for command options)

case $1 in
#*=========================================================================================================================
#*---- Start the beacon. Control if instances are running and avoid reentrancy
#*=========================================================================================================================
	start)


               if [ -f $DPATH$LOCK ]; then
                  echo "Whisper: "`date`" Process lock found, terminating" 2>&1 | tee -a $DPATH$LOG
                  exit 0
               fi

#*---- If already running leave

               if [ $N \> $NMAX ]; then
                  echo "Whisper: "`date`" Daemon already running, exit" 2>&1 | tee -a $DPATH$LOG
                  exit 0
               else

#*---- Turn off relay so PTT=low, if even can not start till next even, if odd continue, turn off GPIO

               gpio mode $GPIO out  2>&1 | tee -a $DPATH$LOG
               gpio -g write $GPIO $OFF  2> /dev/null | tee -a $DPATH$LOG
               sudo $DPATH/turnoff.py

#*---- Infinite loop $EVERY defines how many times comes to RX than TX

               count=0
               while [ true ];  do
               T=$(manageTemp)
               if [ $T -ge $MAXTEMP ]
               then
                 echo "Whisper: "`date`" Temp ("$T") exceeds max ($MAX), stopping TX to cool down during $COOLTIME secs" 2>&1 | tee -a $DPATH$LOG && sleep $COOLTIME
                 echo "Whisper: "`date`" Temperature is now "$(vcgencmd measure_temp)" TX resumed" 2>&1 |  tee -a $DPATH$LOG
               fi

               n=$(( $count % $EVERY ))
               VOLT=$(getVolt)
               TEMP=$(getTemp)
               STATE="T($TEMPÂ°C) V($VOLT) Clk($(getClock)MHz) St($(getStatus)) CPU($(getCPU)%) DASD($(getDASD)%)" 
               echo $STATE | logger -i -t "TLM"
               echo "Whisper: "`date`" Telemetry: "$STATE 2>&1 | tee -a $DPATH$LOG
               TLM=$(python wsprtlm.py -g "$GRID$GRIX" -e "$HEIGHT" -c "$CHANNEL" -b "$VOLT" -t "$TEMP" -l -q -p) 
               echo "Whisper: "`date`" TLM($TLM)"  2>&1 | tee -a $DPATH$LOG 

#*---- It is here on even minutes, thus wait till sec $SYNC to continue (giving a chance if receiving to complete a frame)

               w=$(date +"%S" | sed 's/^0*//')
               echo "Whisper: "`date`" Cycle timer($w) Sync Timer($SYNC)" 2>&1 | tee -a $DPATH$LOG
               if [ "$w" -lt "$SYNC" ]
               then
                  t=$(( $SYNC - $w ))
                  echo "Whisper: "`date`" Sync with WSPR window waiting "$t" secs" 2>&1 | tee -a $DPATH$LOG
                  sleep $t
               fi

#*---- if it is a transmission slot continue, otherwise go to reception mode (always starts in transmission slot)
               echo "Whisper: "`date`" Cycle ($count of $EVERY) TX($n)" 2>&1 | tee -a $DPATH$LOG
               if [ $n -eq 0 ]
               then
  
#*---- Turn antenna (GPIO27) and Launch the beacon transmission, it will align itself with the proper WSPR window, $BAND will control how many slots will be active 
                   if [ $TX -eq "1" ] 
                   then
                      echo "Whisper: "`date`" Turning $GPIO PTT($ON)" 2>&1 | tee -a $DPATH$LOG
                      gpio -g write $GPIO $ON 2>&1 | tee -a $DPATH$LOG
                      gpio -g write $GPIO $ON 2>&1 | tee -a $DPATH$LOG

                      echo "Whisper: "`date`" Starting WSPR transmission cycle" 2>&1 | tee -a $DPATH$LOG
                      sudo $DPATH/turnon.py
                      sudo $WSPRPATH$WSPR $TXOPTS $CALLSIGN $GRID $POWER $BAND 2>&1 | tee -a $DPATH$LOG  
                      count=$(( $count + 1 ))

#*---- End of WSPR cycle, now starts FT8 cycle, first FT8 cycle
     
                      if [ $FT8ON -eq "1" ] 
                      then
                         echo "Whisper: "`date`" Starting FT8 [1/2] WSPR transmission cycle" 2>&1 | tee -a $DPATH$LOG
                         sudo $RPITXPATH$FT8 -f "$FFT8" -m "CQ $CALLSIGN $GRID" -o "$OFFSET" -s "$SLOT" 2>&1 | tee -a $DPATH$LOG
#*---- Listen cycle
                         gpio -g write $GPIO $OFF 2>&1 | tee -a $DPATH$LOG
                         sleep 15
#*---- Second FT8 cycle
                         echo "Whisper: "`date`" Starting FT8 [2/2] transmission cycle" 2>&1 | tee -a $DPATH$LOG
                         gpio -g write $GPIO $ON 2>&1 | tee -a $DPATH$LOG
                         sudo $RPITXPATH$FT8 -f "$FFT8" -m "CQ $CALLSIGN $GRID" -o "$OFFSET" -s "$SLOT" 2>&1 | tee -a $DPATH$LOG
#*---- Listen again
                         gpio -g write $GPIO $OFF 2>&1 | tee -a $DPATH$LOG
                         sleep 15
                      else
                           gpio -g write $GPIO $OFF 2>&1 | tee -a $DPATH$LOG
                           sleep 60
                      fi

#*---- Now CW beacon
                      if [ $CWON -eq "1" ] 
                      then
                         echo "Whisper: "`date`" Starting CW transmission cycle" 2>&1 | tee -a $DPATH$LOG
                         sleep 2
                         gpio -g write $GPIO $ON 2>&1 | tee -a $DPATH$LOG
                         sudo $CWPATH$CW --freq $FCW --wpm 20 "VVV $CALLSIGN $GRID $POWER $TLM 73 K" 2>&1 | tee -a $DPATH$LOG
#*---- Turn off and entering waiting cycle
                         sudo $DPATH/turnoff.py
                         gpio -g write $GPIO $OFF 2>&1 | tee -a $DPATH$LOG
                         sleep 25
                       else
                         gpio -g write $GPIO $OFF 2>&1 | tee -a $DPATH$LOG
                         sleep 50
                       fi
                   else
                      echo "Whisper: "`date`" Transmission not enabled, yield window to reception" 2>&1 | tee -a $DPATH$LOG
                   fi
                 else

#*---- Turn GPIO27 Off (Antenna to RX) and enable the reception cycle (either local or remote)

                     gpio -g write $GPIO $OFF  2>&1 | tee -a $DPATH$LOG
                     sudo $DPATH/turnoff.py

                     if [ $RX -eq "1" ]
                     then
                        echo "Whisper: "`date`" Starting WSPR monitoring cycle" 2>&1 | tee -a $DPATH$LOG
                        sudo $WSPRDPATH$WSPRD $RXPARMS 2>&1 | tee -a $DPATH$LOG 
                     else
                        WAIT=$((( $SYNC * 2 ) - 10 ))
                        echo "Whisper: "`date`" Reception not enabled, wait ($WAIT secs)" 2>&1 | tee -a $DPATH$LOG
                        sleep $WAIT
                     fi
                 fi
                 count=$(( $count + 1 ))
                 if [ $count -eq $EVERY ]
                 then
                    count=0
                 fi
               done

               fi  
		;;
#*=====================================================================================================================
#*---- Stop the beacon if an instance is found running
#*=====================================================================================================================
	stop)

               if [ $N \> $NMAX ]; then
                  killProcess 2> /dev/null | tee -a $DPATH$LOG
               else
                  echo "Whisper:"`date`" No daemon found, exit" 2> /dev/null | tee -a $DPATH$LOG
               fi
               exit 0
  	       ;;

#*=====================================================================================================================
#*---- Restart or  force-reload by stop and start (Miscellaneous operation functions)
#*=====================================================================================================================
	restart|force-reload)
                echo "Whisper: "`date`" Forcing reload" 2> /dev/null | tee -a $DPATH$LOG
                sudo $0 stop  2>&1 | tee -a $DPATH$LOG
                sudo $0 start 2>&1 | tee -a $DPATH$LOG
  		;;
#*---- Another alias to restart

	try-restart)
                echo "Whisper: "`date`" Trying to restart" 2>&1 | tee -a $DPATH$LOG
		if sudo $0 status >/dev/null; then
		   sudo $0 restart
		else
		   exit 0
		fi
		;;
#*---- Yet another alias to restart

	reload)
                echo "Whisper: "`date`" Script reload" 2>&1 | tee -a $DPATH$LOG
		sudo $0 restart
                exit 3
		;;
#*====================================================================================================
#*---- Stop the beacon and create a special lock file which will prevent further launches until reset
#*====================================================================================================
        lock)
                echo "Whisper: "`date`" Script locked" 2>&1 | tee -a $DPATH$LOG
                sudo touch $DPATH$LOCK 2>&1 | tee -a $DPATH$LOG
                sudo $0 stop
                exit 4
                ;;
#*====================================================================================================
#*---- Erase the lock file and launch
#*====================================================================================================
        reset)
                echo "Whisper: "`date`" Script reset" 2>&1 | tee -a $DPATH$LOG
                sudo rm -r $DPATH$LOCK 2>&1 | tee -a $DPATH$LOG
                exit 3
                ;;
#*====================================================================================================
#*---- Marks log with special label (i.e. a change in the beacon)
#*====================================================================================================
	checkpoint)
                echo "Whisper: "`date`" WSPR Log checkpoint("$2 $3 $4 $5")" 2>&1 | tee -a $DPATH$LOG
                exit 0
                ;;


#*====================================================================================================
#*---- beacon status
#*====================================================================================================
	status)
                echo "Whisper: "`date`" WSPR Process List Status" 2>&1 | tee -a $DPATH$LOG
                if [ $N \> $NMAX ]; then

#*---- instances of associated processes


                   echo "Whisper:" `date`" Process List" 2>&1 | tee -a $DPATH$LOG
                   for j in $PROCLIST
                   do
                     S=`ps -ef | pgrep $j`
                     for i in $S; do
                       echo "Whisper: "`date`"   --- $j PID("$i")" 2> /dev/null | tee -a $DPATH$LOG
                     done
                   done

#*---- instances of whisper script

                  P=`sudo ps ax | awk '! /awk/ && /whisper/ { print $1}'`
                  N=0
                  for line in $P; do
                     if [ $line -ne $$ ] 
                     then
                         echo "Whisper: "`date`"   --- whisper PID("$line")" 2> /dev/null | tee -a $DPATH$LOG
                     fi
                  done
                else
                  echo "Whisper: "`date`" No daemon found, exit" 2> /dev/null | tee -a $DPATH$LOG
		  exit 0
		fi

		;;
#*----- else, just a help message

	*)
		echo "Usage: $0 {start|stop|lock|reset|restart|try-restart|checkpoint|force-reload|status}"
		exit 2
		;;
esac
