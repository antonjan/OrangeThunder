import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.basemap import Basemap
from datetime import datetime


def GetLon(ONE, THREE, FIVE):
    StrStartLon = ''
    StrEndLon = ''

    Field = ((ord(ONE.lower()) - 97) * 20) 
    Square = int(THREE) * 2
    SubSquareLow = (ord(FIVE.lower()) - 97) * (2/24)
    SubSquareHigh = SubSquareLow + (2/24)

    StrStartLon = str(Field + Square + SubSquareLow - 180 )
    StrEndLon = str(Field + Square + SubSquareHigh - 180 )

    return StrStartLon, StrEndLon

def GetLat(TWO, FOUR, SIX):
    StrStartLat = ''
    StrEndLat = ''

    Field = ((ord(TWO.lower()) - 97) * 10) 
    Square = int(FOUR)
    SubSquareLow = (ord(SIX.lower()) - 97) * (1/24)
    SubSquareHigh = SubSquareLow + (1/24)

    StrStartLat = str(Field + Square + SubSquareLow - 90)
    StrEndLat = str(Field + Square + SubSquareHigh - 90)    

    return StrStartLat, StrEndLat

def GridToLatLong(strMaidenHead):
    if len(strMaidenHead) < 6: strMaidenHead="GF05TE" 

    ONE = strMaidenHead[0:1]
    TWO = strMaidenHead[1:2]
    THREE = strMaidenHead[2:3]
    FOUR = strMaidenHead[3:4]
    FIVE = strMaidenHead[4:5]
    SIX = strMaidenHead[5:6]

    (strStartLon, strEndLon) = GetLon(ONE, THREE, FIVE)
    (strStartLat, strEndLat) = GetLat(TWO, FOUR, SIX)

    print ('Start Lon = ' + strStartLon)
    print ('End   Lon = ' + strEndLon)
    print ()
    print ('Start Lat = ' + strStartLat)
    print ('End   Lat = ' + strEndLat)

    return strStartLon,strStartLat

def plotMap(map,gFrom,gTo):

    lonFrom,latFrom=GridToLatLong(gFrom)
    lonTo,latTo=GridToLatLong(gTo)


    loFrom=float(lonFrom)
    loTo=float(lonTo)
    laFrom=float(latFrom)
    laTo=float(latTo)


    lat = [laFrom,laTo] 
    lon = [loFrom,loTo] 


    x, y = map(lon, lat)
    map.plot(x, y, 'o-', markersize=1, linewidth=1) 
    return





MH= 'GF05te'

#map = Basemap(projection='ortho',lat_0=-34.6,lon_0=-58.4,resolution='c')

map = Basemap(width=1024,height=1024,projection='merc',llcrnrlon=-170,llcrnrlat=-75,urcrnrlon=170,urcrnrlat=75,resolution='l')


map.drawmeridians(np.arange(0,360,30))
map.drawparallels(np.arange(-90,90,30))
map.drawcoastlines(linewidth=0.25)
map.drawcountries(linewidth=0.25)

# Process WSPRNet dataset with awk '{print "plotMap(map,\""$7"\",\""$10"\")"}' wsprdata.lst > set.py

plotMap(map,"GG14hq","GF05te")
plotMap(map,"GG14hq","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"IO83ls","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"FN11qj","GF05te")
plotMap(map,"EM87ki","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"EM87ki","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"KP24rt","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO01bi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"KP24rt","GF05te")
plotMap(map,"JO01bi","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO20hi","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JO01bi","GF05te")
plotMap(map,"JM19iq","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"KP24rt","GF05te")
plotMap(map,"IL38bo","GF05te")
plotMap(map,"FN11qj","GF05te")
plotMap(map,"FN54mn","GF05te")
plotMap(map,"JO20hi","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JM19iq","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO38ig","GF05te")
plotMap(map,"KP24rt","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO31mb","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GK03","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"IO83ls","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO31mb","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"KN35jd","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"FK88","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"IO83","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"KP41","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"FN41nw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"GF05te","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO01bj","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"FN41nw","GF05te")
plotMap(map,"FN54mn","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JN48mm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO21ei","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GK03","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO43jg","GF05te")
plotMap(map,"IO83","GF05te")
plotMap(map,"IO83","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"IO83","GF05te")
plotMap(map,"IO83","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"EM75xx","GF05te")
plotMap(map,"EM73sc","GF05te")
plotMap(map,"EM73sc","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EM72gn","GF05te")
plotMap(map,"JN48fw","GF05te")
plotMap(map,"JM19iq","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"GG77xm","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JM19iq","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EM95ji","GF05te")
plotMap(map,"EM95ji","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EM20","GF05te")
plotMap(map,"EM97xe","GF05te")
plotMap(map,"EN53","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"EN53","GF05te")
plotMap(map,"EM69us","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"DM42dm","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"DM42dm","GF05te")
plotMap(map,"EN90rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"EN90rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"DM42pg","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GK03","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05qi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05qi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05qi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05qi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"DM41kx","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"DM03vv","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"DM41kx","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"CM87uw","GF05te")
plotMap(map,"DM42pg","GF05te")
plotMap(map,"DM41kx","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EN83sc","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"DM42pg","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GK03","GF05te")
plotMap(map,"EM75xx","GF05te")
plotMap(map,"FM19qf","GF05te")
plotMap(map,"FM29fw","GF05te")
plotMap(map,"DM42pg","GF05te")
plotMap(map,"FM29fw","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"FM19qf","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"JO31","GF05te")
plotMap(map,"KP24rt","GF05te")
plotMap(map,"JO31","GF05te")
plotMap(map,"JO02bf","GF05te")
plotMap(map,"JO31","GF05te")
plotMap(map,"EL96xi","GF05te")
plotMap(map,"EL88wv","GF05te")
plotMap(map,"DM42pg","GF05te")
plotMap(map,"JN06","GF05te")
plotMap(map,"JN06","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"EM12kx","GF05te")
plotMap(map,"GF05rj","GF05te")
plotMap(map,"FK68vj","GF05te")
plotMap(map,"CM98iq","GF05te")
plotMap(map,"EM95ji","GF05te")

date = datetime.utcnow()
CS=map.nightshade(date)

map.bluemarble(scale=0.25)


#map.shadedrelief()


# draw the edge of the map projection region (the projection limb)
#map.drawmapboundary(fill_color='aqua')
# draw lat/lon grid lines every 30 degrees.
# make up some data on a regular lat/lon grid.
#nlats = 73; nlons = 145; delta = 2.*np.pi/(nlons-1)
#lats = (0.5*np.pi-delta*np.indices((nlats,nlons))[0,:,:])
#lons = (delta*np.indices((nlats,nlons))[1,:,:])
#wave = 0.75*(np.sin(2.*lats)**8*np.cos(4.*lons))
#mean = 0.5*np.cos(2.*lats)*((np.sin(2.*lats))**2 + 2.)
# compute native map projection coordinates of lat/lon grid.
#x, y = map(lons*180./np.pi, lats*180./np.pi)
# contour data over the map.
#cs = map.contour(x,y,wave+mean,15,linewidths=1.5)
plt.title('14 MHz LU7DID WSPR Monitoring Reports 9-Jun to 23-Jun')
plt.savefig('condx.png')
plt.savefig('condx.pdf')
plt.show()

exit(0)
# set up orthographic map projection with
# perspective of satellite looking down at 50N, 100W.
# use low resolution coastlines.
#width = 28000000; lon_0 = -105; lat_0 = 40
#map = Basemap(width=width,height=width,projection='aeqd',lat_0=lat_0,lon_0=lon_0)


# llcrnrlat,llcrnrlon,urcrnrlat,urcrnrlon
# are the lat/lon values of the lower left and upper right corners
# of the map.
# lat_ts is the latitude of true scale.
# resolution = 'c' means use crude resolution coastlines.
#map = Basemap(projection='merc',llcrnrlat=-80,urcrnrlat=80,llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')
#map.drawcoastlines()
#map.fillcontinents(color='coral',lake_color='aqua')



# draw coastlines, country boundaries, fill continents.
#map.drawcoastlines(linewidth=0.25)
#map.drawcountries(linewidth=0.25)
#map.fillcontinents(color='coral',lake_color='aqua')

#map = Basemap(width=12000000,height=9000000,projection='lcc',resolution=None,lat_1=45.,lat_2=55,lat_0=50,lon_0=-58.4)
#map.bluemarble()

#map = Basemap(projection='merc',llcrnrlat=-89,urcrnrlat=89,resolution='l')
